script:
  gerer_eclairage:
    alias: "G√©rer √âclairage"
    description: "Script central pour g√©rer l'√©clairage selon les conditions (pr√©sence, vocal, absence). Priorit√© vocale absolue. Transition douce apr√®s passage en mode jour."
    fields:
      piece:
        description: "Nom de la pi√®ce (chambre, cuisine, salon, sam, sdb)"
        example: "chambre"
        required: true
        selector:
          text:
      source:
        description: "Source du d√©clenchement"
        example: "vocal_onoff"
        required: true
        selector:
          select:
            options:
              - "vocal_onoff"
              - "presence"
              - "absence"
      action:
        description: "Action sp√©cifique (on, off, toggle). Doit √™tre fourni pour vocal_onoff."
        example: "on"
        required: false
        selector:
          text:
    sequence:
      # ===== V√âRIFICATION PR√âALABLE : √äTES-VOUS √Ä LA MAISON ? =====
      - condition: template
        value_template: "{{ states('sensor.etat_canabang_et_device_tracker') == 'home' }}"

      # ===== INITIALISATION DES VARIABLES DE BASE =====
      - variables:
          light_entity: "light.hue_{{ piece }}"
          is_light_on: "{{ is_state('light.hue_' + piece, 'on') }}"
          mode_nuit: "{{ is_state('input_text.jour_nuit', 'nuit') }}"
          soleil_visible: "{{ state_attr('sun.sun', 'elevation') > 0 }}"

      # ===== D√âFINITION DE LA SC√àNE √Ä ACTIVER (AVEC TRANSITION DOUCE DE 15 MIN) =====
          scene_a_activer: >
            {% set dernier_changement = states('input_datetime.dernier_changement_jour_nuit') | default('1970-01-01 00:00:00') %}
            {% set maintenant = now() %}
            {% set delta_minutes = (now() - datetime.strptime(dernier_changement, '%Y-%m-%d %H:%M:%S')).total_seconds() / 60 %}
            {% if mode_nuit %}
              scene.hue_{{ piece }}_1_veilleuse
            {% elif soleil_visible and delta_minutes < 15 %}
              scene.hue_{{ piece }}_1_veilleuse
            {% elif soleil_visible %}
              scene.hue_{{ piece }}_2_stimulation
            {% else %}
              scene.hue_{{ piece }}_3_attenue
            {% endif %}

      # ===== GESTION SELON LA SOURCE =====
      - choose:
          # ===== [1] COMMANDES VOCALES ON/OFF =====
          # Priorit√© ABSOLUE : ignore tous les blocages
          - conditions:
              - condition: template
                value_template: "{{ source == 'vocal_onoff' }}"
            sequence:
              - choose:
                  # ACTION OFF ou TOGGLE sur lumi√®re allum√©e
                  - conditions:
                      - condition: or
                        conditions:
                          - condition: template
                            value_template: "{{ action == 'off' }}"
                          - condition: and
                            conditions:
                              - condition: template
                                value_template: "{{ action in ['toggle'] }}"
                              - condition: template
                                value_template: "{{ is_light_on }}"
                    sequence:
                      - service: light.turn_off
                        target:
                          entity_id: "{{ light_entity }}"

                  # ACTION ON ou TOGGLE sur lumi√®re √©teinte
                  - conditions:
                      - condition: or
                        conditions:
                          - condition: template
                            value_template: "{{ action == 'on' }}"
                          - condition: and
                            conditions:
                              - condition: template
                                value_template: "{{ action in ['toggle'] }}"
                              - condition: template
                                value_template: "{{ not is_light_on }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_a_activer }}"

          # ===== [2] D√âTECTION PR√âSENCE =====
          - conditions:
              - condition: template
                value_template: "{{ source == 'presence' }}"
            sequence:
              # üîí BLOCAGES : Ne pas activer si conditions sp√©cifiques
              - choose:
                  # Chambre : bloqu√© si mode nuit OU lit occup√©
                  - conditions:
                      - condition: template
                        value_template: "{{ piece == 'chambre' }}"
                      - condition: or
                        conditions:
                          - condition: template
                            value_template: "{{ mode_nuit }}"
                          - condition: state
                            entity_id: binary_sensor.esp_bed_occupation_master_bed_occupied
                            state: 'on'
                    sequence:
                      - stop: "Chambre : activation bloqu√©e (mode nuit ou lit occup√©)"

                  # SDB : bloqu√© si prismal ON OU luminosit√© > 2 lux
                  - conditions:
                      - condition: template
                        value_template: "{{ piece == 'sdb' }}"
                      - condition: or
                        conditions:
                          - condition: state
                            entity_id: switch.prismal
                            state: 'on'
                          - condition: numeric_state
                            entity_id: sensor.lux_sdb
                            above: 2
                    sequence:
                      - stop: "SDB : activation bloqu√©e (prismal ON ou lux > 2)"

                  # Toutes pi√®ces : bloqu√© si lumi√®re d√©j√† allum√©e
                  - conditions:
                      - condition: template
                        value_template: "{{ is_light_on }}"
                    sequence:
                      - stop: "Lumi√®re d√©j√† allum√©e : pas d'activation sur pr√©sence"

              # ‚úÖ Si aucun blocage, on active la sc√®ne
              - service: scene.turn_on
                target:
                  entity_id: "{{ scene_a_activer }}"

          # ===== [3] D√âTECTION ABSENCE =====
          - conditions:
              - condition: template
                value_template: "{{ source == 'absence' }}"
            sequence:
              - service: light.turn_off
                target:
                  entity_id: "{{ light_entity }}"
