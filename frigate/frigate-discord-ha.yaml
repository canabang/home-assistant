# ==========================================
# AUTOMATISATION HOME ASSISTANT
# ==========================================
# Envoie les d√©tections Frigate vers Discord avec descriptions IA

alias: ü§ñ Frigate ‚Üí Discord + HA
description: D√©tections Frigate avec GenAI, identification auto et horodatage

# ==========================================
# D√âCLENCHEUR
# ==========================================
# Se d√©clenche √† chaque mise √† jour d'objet track√© par Frigate
triggers:
  - topic: frigate/tracked_object_update  # Topic MQTT surveill√©
    trigger: mqtt

# ==========================================
# CONDITION
# ==========================================
# N'ex√©cute l'action que si le payload contient une description IA
conditions:
  - condition: template
    value_template: |-
      {{ trigger.payload_json.type is defined and 
         trigger.payload_json.type == 'description' }}

# ==========================================
# ACTIONS
# ==========================================
actions:
  # ACTION 1 : Envoi notification Discord
  - action: script.notification_discord
    data:
      nom: "{{ identity }}"      # Nom identifi√© (Ga√´l, Chat, Inconnu)
      description: |
        üì∑ **Cam√©ra:** {{ camera }}
        ‚è∞ **D√©tection:** {{ timestamp }}

        **ü§ñ Description IA:**
        {{ description }}

        [üìπ Voir la vid√©o]({{ clip_url }}) ‚Ä¢ [üìä D√©tails]({{ details_url }})
      image_url: "{{ snapshot_url }}"   # URL du snapshot
      images: "{{ snapshot_url }}"
  
  # ACTION 2 : Notification persistante dans Home Assistant
  - action: persistent_notification.create
    data:
      notification_id: frigate_{{ event_id }}  # ID unique pour chaque √©v√©nement
      title: "{{ identity }} - {{ camera }}"
      message: >
        ‚è∞ **{{ timestamp }}**


        **ü§ñ Description IA:**

        {{ description }}


        **Event ID:** {{ event_id }}


        **Liens:**

        [üì∏ Snapshot]({{ snapshot_url }}) ‚Ä¢ [üìπ Vid√©o]({{ clip_url }}) ‚Ä¢ [üìä
        D√©tails]({{ details_url }})

# ==========================================
# CONFIGURATION EX√âCUTION
# ==========================================
mode: queued                    # File d'attente : ex√©cute les d√©clenchements successifs
max: 10                         # Maximum 10 notifications en attente

# ==========================================
# VARIABLES
# ==========================================
# Traitement des donn√©es de l'√©v√©nement Frigate
variables:
  # R√©cup√©ration des donn√©es brutes depuis MQTT
  event_id: "{{ trigger.payload_json.id }}"
  camera: "{{ trigger.payload_json.camera }}"
  description: "{{ trigger.payload_json.description }}"
  
  # Identification automatique bas√©e sur le contenu de la description IA
  identity: >
    {% if 'Ga√´l' in description %}
      üè† Ga√´l                    # Personne identifi√©e (reconnaissance faciale)
    {% elif 'Personne non identifi√©e' in description or 'Personne inconnue' in
    description %}
      ‚ö†Ô∏è Personne inconnue       # Personne d√©tect√©e mais non reconnue
    {% elif 'Chat' in description or 'chat' in description %}
      üê± Chat                    # Animal d√©tect√©
    {% else %}
      üîç D√©tection               # D√©tection g√©n√©rique
    {% endif %}
  
  # Horodatage fran√ßais (JJ/MM/AA √† HHhMM)
  timestamp: "{{ now().strftime('%d/%m/%y √† %Hh%M') }}"
  
  # URLs des m√©dias (via nom de domaine public Frigate)
  snapshot_url: https://frigate.DOMAIN.TLD/api/events/{{ event_id }}/snapshot.jpg  # Image capture (anonymis√©e)
  clip_url: https://frigate.DOMAIN.TLD/api/events/{{ event_id }}/clip.mp4          # Vid√©o courte (anonymis√©e)
  details_url: >-
    https://frigate.DOMAIN.TLD/events?camera={{ camera }}&id={{ event_id }}       # D√©tails complets (anonymis√©)
