mqtt:
  enabled: true
  host: 192.168.1.161
  port: 1883
  topic_prefix: frigate
  client_id: frigate
  user: canabang
  password: canaW33d

ffmpeg:
  hwaccel_args: preset-vaapi

detectors:
  ov:
    type: openvino
    device: CPU
    num_threads: 2

model:
  width: 300
  height: 300
  input_tensor: nhwc
  input_pixel_format: bgr
  path: /openvino-model/ssdlite_mobilenet_v2.xml
  labelmap_path: /openvino-model/coco_91cl_bkgr.txt

# Configuration audio optimisée
audio:
  enabled: true
  max_not_heard: 30
  min_volume: 700
  listen:
    # Sons de sécurité prioritaires
    - glass
    - knock
    - door_bell
    - speech
    - scream
    # Sons chat
    - cat
    - meow
    - purr

# go2rtc : WebRTC avec audio bidirectionnel
go2rtc:
  streams:
    # Stream principal avec audio AAC + Opus pour WebRTC
    oeil-de-sauron:
      - rtsp://admin:canaW33d@192.168.1.167:554/h264Preview_01_main  # Source
      #- "ffmpeg:oeil-de-sauron#audio=opus"  # Transcodage pour WebRTC
          
    # Stream secondaire pour enregistrement léger
    oeil-de-sauron-sub:
      - rtsp://admin:canaW33d@192.168.1.167:554/h265Preview_01_sub
    
    # ✅ Configuration backchannel comme destination (pas source)
    oeil-de-sauron-backchannel:
      - "publish:"  # Accepte uniquement les flux entrants
  
  # ✅ Configurer le routing vers la caméra
  publish:
    oeil-de-sauron-backchannel:
      outputs:
        - onvif://admin:canaW33d@192.168.1.167:8000#backchannel=1
  
  # Configuration WebRTC pour latence ultra-basse
  webrtc:
    candidates:
      - 192.168.1.184:8555  # IP locale de votre Home Assistant
      - stun:8555           # Pour traversée NAT si accès externe
    
    # Port d'écoute pour connexions WebRTC (default: 8555)
    listen: ":8555"
  
  # API go2rtc (optionnel mais utile pour debug)
  api:
    listen: ":1984"
  
  # ✅ Activer les logs détaillés
  log:
    level: debug

cameras:
  oeil-de-sauron:
    # Audio bidirectionnel activé
    audio:
      enabled: true
      # Optionnel : augmenter le volume du micro si faible
      # volume: 1.5
    
    # GenAI avec contexte audio
    genai:
      use_snapshot: true
      prompt: "Tu es un système de sécurité. Analyse l'image de la caméra {camera} située à l'entrée principale. La personne détectée est identifiée comme : {sub_label}. Utilise TOUJOURS ce nom dans ta réponse."
      object_prompts:
        person: "IDENTITÉ : {sub_label}. Si ce champ contient un nom comme 'Gaël', commence ta réponse par '[NOM] est...' (exemple : 'Gaël est visible à l'entrée' ou 'Gaël sort de l'appartement'). Si ce champ est vide ou contient 'unknown', écris 'Personne non identifiée'. ACTIONS : Décris ce que la personne fait (entrer, sortir, porter des objets, se déplacer dans la pièce). Si elle transporte ou manipule des objets visibles, décris-les brièvement. Ne mentionne AUCUN comportement suspect sauf si clairement justifié par des actions inhabituelles."
        cat: "IDENTITÉ : Chat détecté. ACTIONS : Décris ses mouvements et comportement (errer, chasser, se reposer, jouer). Si le chat interagit avec des objets spécifiques (pots de fleurs, meubles, portes), mentionne-le. Reste factuel et évite les interprétations excessives."
      objects:
        - person
        - cat
    
    enabled: true
    
    # Configuration dual-stream avec WebRTC prioritaire
    ffmpeg:
      inputs:
        # Stream PRINCIPAL via go2rtc : détection + audio
        - path: rtsp://127.0.0.1:8554/oeil-de-sauron
          roles:
            - detect
            - audio
        
        # Stream SECONDAIRE : enregistrement continu léger
        - path: rtsp://127.0.0.1:8554/oeil-de-sauron-sub
          roles:
            - record
      
      input_args: preset-rtsp-restream  # Optimisé pour go2rtc
      
      # Configuration audio retour (two-way)
      output_args:
        record: preset-record-generic-audio-copy  # Conserve audio AAC natif
    
    detect:
      enabled: true
      width: 1920
      height: 1080
      fps: 5
    
    zones:
      entree:
        coordinates: 0.443,0.253,0.456,0.999,0.897,0.957,0.837,0.174
        loitering_time: 0
        inertia: 3
      appart:
        coordinates: 0.005,0.19,0.011,0.977,0.993,0.975,0.99,0.033
        loitering_time: 0
        inertia: 3
    
    objects:
      filters:
        person:
          min_score: 0.75
          threshold: 0.75
          min_area: 3000
          max_area: 500000
        cat:
          min_score: 0.70
          threshold: 0.70
          min_area: 1000
      mask: 0.821,0.445,0.824,0.672,0.895,0.672,0.892,0.45
    
    onvif:
      host: 192.168.1.167
      port: 8000
      user: admin
      password: canaW33d
      autotracking:
        enabled: true
        calibrate_on_startup: false
        zooming: disabled
        zoom_factor: 0.3
        track:
          - person
          - cat
        required_zones:
          - appart
        return_preset: base
        timeout: 15
    
    # Configuration live pour WebRTC dans l'interface
    live:
      streams:
        Main Stream: oeil-de-sauron
        Sub Stream: oeil-de-sauron-sub
      # Qualité maximale pour WebRTC
      quality: 8

detect:
  enabled: true

version: 0.16-1

semantic_search:
  enabled: true
  model_size: small

face_recognition:
  enabled: true
  unknown_score: 0.7
  detection_threshold: 0.65
  recognition_threshold: 0.85
  min_area: 500
  min_faces: 3
  save_attempts: 150
  blur_confidence_filter: true
  model_size: small

lpr:
  enabled: false

classification:
  bird:
    enabled: false

objects:
  track:
    - person
    - cat

snapshots:
  enabled: true
  timestamp: true
  bounding_box: true
  crop: false
  required_zones: []
  retain:
    default: 10
    objects:
      person: 14
      cat: 14

# Enregistrement optimisé avec audio
record:
  enabled: true
  retain:
    days: 2
    mode: motion
  alerts:
    pre_capture: 5
    post_capture: 5
    retain:
      days: 7
      mode: motion
  detections:
    pre_capture: 5
    post_capture: 5
    retain:
      days: 7
      mode: motion

genai:
  enabled: true
  provider: gemini
  api_key: AIzaSyB8Cv3O9SD949alEhyii4IhJVED4RWlX-M
  model: gemini-2.5-flash

notifications:
  enabled: true

ui:
  timezone: Europe/Paris
  time_format: 24hour
  date_style: short
  time_style: medium
  strftime_fmt: "%d/%m/%Y %H:%M"
  unit_system: metric
