## quelle alexa suivant quelle pièce est occupée ##
- sensor:
    - name: "Presence Piece"
      unique_id: presence_piece
      state: >
        {% set presence_map = {
          'Salon': ['binary_sensor.esp_salon_presence', 'binary_sensor.esp_multi_capteur_presence'],
          'Cuisine': ['binary_sensor.esp_cuisine_presence'],
          'Chambre': ['binary_sensor.esp_chambre_presence'],
          'SdB': ['binary_sensor.esp_sdb_presence']
        } %}

        {# Construire la liste des pièces occupées avec namespace #}
        {% set ns = namespace(pieces_occupees=[]) %}
        {% for piece, capteurs in presence_map.items() %}
          {% for capteur in capteurs %}
            {% if is_state(capteur, 'on') %}
              {% set ns.pieces_occupees = ns.pieces_occupees + [piece] %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endfor %}

        {# Logique de priorité affinée #}
        {% if ns.pieces_occupees | length == 0 %}
          {# Aucune présence #}
        {% elif ns.pieces_occupees | length == 1 %}
          {# Une seule pièce détectée - facile #}
          {{ ns.pieces_occupees[0] }}
        {% elif ns.pieces_occupees | length > 1 %}
          {# Plusieurs pièces détectées - logique de priorité #}
          {% if 'SdB' in ns.pieces_occupees and (is_state('binary_sensor.ouvfenetsdb_contact', 'on') or is_state('switch.prismal', 'on')) %}
            {# Si SdB détectée avec fenêtre ouverte OU switch prismal allumé, l'exclure des candidats #}
            {% set pieces_candidates = ns.pieces_occupees | reject('eq', 'SdB') | list %}
          {% else %}
            {# Sinon, garder toutes les pièces comme candidates #}
            {% set pieces_candidates = ns.pieces_occupees %}
          {% endif %}
          
          {# Appliquer l'ordre de priorité sur les candidats restants #}
          {% if 'Salon' in pieces_candidates %}
            Salon
          {% elif 'Cuisine' in pieces_candidates %}
            Cuisine
          {% elif 'Chambre' in pieces_candidates %}
            Chambre
          {% elif 'SdB' in pieces_candidates %}
            SdB
          {% else %}
            {# Cas de secours si toutes les pièces ont été exclues #}
            {{ ns.pieces_occupees[0] }}
          {% endif %}
        {% endif %}
      attributes:
        echo: >
          {% set echo_map = {
            'Salon': 'media_player.echo_studio_d',
            'Cuisine': 'media_player.echo_show_cuisine',
            'Chambre': 'media_player.echo_show_chambre',
            'SdB': 'media_player.echo_sdb'
          } %}
          {{ echo_map.get(states('sensor.presence_piece'), 'media_player.echo_dot_gael') }}
        pieces_occupees: >
          {% set presence_map = {
            'Salon': ['binary_sensor.esp_salon_presence', 'binary_sensor.esp_multi_capteur_presence'],
            'Cuisine': ['binary_sensor.esp_cuisine_presence'],
            'Chambre': ['binary_sensor.esp_chambre_presence'],
            'SdB': ['binary_sensor.esp_sdb_presence']
          } %}

          {% set ns = namespace(pieces_occupees=[]) %}
          {% for piece, capteurs in presence_map.items() %}
            {% for capteur in capteurs %}
              {% if is_state(capteur, 'on') %}
                {% set ns.pieces_occupees = ns.pieces_occupees + [piece] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ ns.pieces_occupees | join(', ') }}
        nombre_pieces_occupees: >
          {% set presence_map = {
            'Salon': ['binary_sensor.esp_salon_presence', 'binary_sensor.esp_multi_capteur_presence'],
            'Cuisine': ['binary_sensor.esp_cuisine_presence'],
            'Chambre': ['binary_sensor.esp_chambre_presence'],
            'SdB': ['binary_sensor.esp_sdb_presence']
          } %}

          {% set ns = namespace(pieces_occupees=[]) %}
          {% for piece, capteurs in presence_map.items() %}
            {% for capteur in capteurs %}
              {% if is_state(capteur, 'on') %}
                {% set ns.pieces_occupees = ns.pieces_occupees + [piece] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ ns.pieces_occupees | length }}
        sdb_exclue: >
          {% set presence_map = {
            'Salon': ['binary_sensor.esp_salon_presence', 'binary_sensor.esp_multi_capteur_presence'],
            'Cuisine': ['binary_sensor.esp_cuisine_presence'],
            'Chambre': ['binary_sensor.esp_chambre_presence'],
            'SdB': ['binary_sensor.esp_sdb_presence']
          } %}

          {% set ns = namespace(pieces_occupees=[]) %}
          {% for piece, capteurs in presence_map.items() %}
            {% for capteur in capteurs %}
              {% if is_state(capteur, 'on') %}
                {% set ns.pieces_occupees = ns.pieces_occupees + [piece] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ 'SdB' in ns.pieces_occupees and (is_state('binary_sensor.ouvfenetsdb_contact', 'on') or is_state('switch.prismal', 'on')) }}
        fenetre_sdb_ouverte: >
          {{ is_state('binary_sensor.ouvfenetsdb_contact', 'on') }}
        switch_prismal_on: >
          {{ is_state('switch.prismal', 'on') }}
