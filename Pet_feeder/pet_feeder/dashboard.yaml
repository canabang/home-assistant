title: 🐾 Pet Feeder
path: petfeeder02
icon: mdi:food-drumstick
cards: []
type: sections
sections:
  - type: grid
    cards:
      - type: horizontal-stack
        cards:
          - type: gauge
            entity: sensor.pourcentage_croquette_restant
            name: Stock Restant
            min: 0
            max: 100
            severity:
              green: 50
              yellow: 25
              red: 10
            needle: true
          - type: custom:mini-graph-card
            entities:
              - entity: sensor.jours_restants_nourriture
                name: Jours restants
                show_state: true
                show_graph: false
            height: 80
            font_size: 75
            card_mod:
              style: |
                ha-card {
                  text-align: center;
                  {% if states('sensor.jours_restants_nourriture')|float < 3 %}
                    background: rgba(244,67,54,0.1);
                    border: 2px solid #f44336;
                  {% elif states('sensor.jours_restants_nourriture')|float < 7 %}
                    background: rgba(255,152,0,0.1);
                    border: 2px solid #ff9800;
                  {% endif %}
                }
      - type: entities
        title: 📊 Suivi Consommation Avancé
        entities:
          - entity: sensor.consommation_moyenne_reelle
            name: Moyenne réelle depuis refill
            icon: mdi:chart-line-variant
            secondary_info: |
              {{ state_attr('sensor.consommation_moyenne_reelle', 'methode') }}
          - entity: input_number.pet_feeder_cumulative_distributed_since_refill
            name: Cumulé depuis refill
            icon: mdi:scale-balance
          - entity: sensor.jours_restants_nourriture_methode_cumulative
            name: Jours restants (précis)
            icon: mdi:calendar-clock
            secondary_info: >
              {{
              state_attr('sensor.jours_restants_nourriture_methode_cumulative',
              'precision') }}
          - type: divider
          - type: custom:template-entity-row
            entity: input_number.pet_feeder_refill_date
            name: Date dernier refill
            icon: mdi:calendar-plus
            state: >
              {% set timestamp = states('input_number.pet_feeder_refill_date') |
              float(0) %} {% if timestamp > 0 %}
                {{ timestamp | timestamp_custom('%d/%m/%Y à %H:%M') }}
              {% else %}
                Non défini
              {% endif %}
            secondary: >
              {% set timestamp = states('input_number.pet_feeder_refill_date') |
              float(0) %} {% if timestamp > 0 %}
                Il y a {{ ((now().timestamp() - timestamp) / 86400) | round(1) }} jours
              {% else %}
                -
              {% endif %}
      - type: entities
        title: 📊 Consommation Aujourd'hui
        entities:
          - entity: sensor.poids_reel_distribue_aujourd_hui
            name: Dernier repas
            icon: mdi:bowl
          - entity: input_number.pet_feeder_daily_consumption_counter
            name: Total consommé aujourd'hui
            icon: mdi:counter
          - entity: sensor.consommation_quotidienne_moyenne
            name: Moyenne quotidienne
            icon: mdi:chart-line
          - entity: input_number.pet_feeder_target_daily_weight
            name: Objectif quotidien
            icon: mdi:target
  - type: grid
    cards:
      - type: entities
        title: ⏰ Portions Programmées
        entities:
          - entity: sensor.portions_calculees_matin
            name: 🌅 Matin (8h00)
            secondary_info: >
              {{ state_attr('sensor.portions_calculees_matin',
              'poids_theorique') }} -  {{
              state_attr('sensor.portions_calculees_matin', 'pourcentage') }}
          - entity: sensor.portions_calculees_midi
            name: ☀️ Midi (14h00)
            secondary_info: >
              {{ state_attr('sensor.portions_calculees_midi', 'poids_theorique')
              }} -  {{ state_attr('sensor.portions_calculees_midi',
              'pourcentage') }}
          - entity: sensor.portions_calculees_soir
            name: 🌙 Soir (20h00)
            secondary_info: >
              {{ state_attr('sensor.portions_calculees_soir', 'poids_theorique')
              }} -  {{ state_attr('sensor.portions_calculees_soir',
              'pourcentage') }}
          - type: divider
          - entity: sensor.total_portions_calculees
            name: 📋 Total programmé
            secondary_info: >
              {{ state_attr('sensor.total_portions_calculees',
              'poids_total_theorique') }}
      - type: horizontal-stack
        cards:
          - type: entities
            title: 📦 Gestion Stock
            entities:
              - entity: input_number.pet_feeder_stock_estime
                name: Stock estimé
                icon: mdi:warehouse
              - entity: input_number.pet_feeder_max_capacity
                name: Capacité max
                icon: mdi:barrel
              - entity: input_boolean.pet_feeder_stock_was_low
                name: Stock était bas
                icon: mdi:alert-circle
              - entity: number.pet_feeder_portion_weight
                name: Poids par portion
                icon: mdi:scale
  - type: grid
    cards:
      - type: conditional
        conditions:
          - entity: sensor.consommation_quotidienne_moyenne
            state_not: "0"
        card:
          type: entities
          title: 📈 Statistiques Avancées
          entities:
            - type: custom:multiple-entity-row
              entity: sensor.consommation_quotidienne_moyenne
              name: Consommation aujourd'hui
              show_state: false
              entities:
                - entity: sensor.consommation_quotidienne_moyenne
                  name: Actuelle
                  unit: g
                - entity: input_number.pet_feeder_target_daily_weight
                  name: Objectif
                  unit: g
            - type: custom:multiple-entity-row
              entity: sensor.consommation_moyenne_reelle
              name: Analyse sur plusieurs jours
              show_state: false
              entities:
                - entity: sensor.consommation_moyenne_reelle
                  name: Moyenne
                  unit: g/j
                - entity: sensor.jours_restants_nourriture_methode_cumulative
                  name: Autonomie
                  unit: j
            - entity: input_number.pet_feeder_total_distributed
              name: Total distribué (cumul)
              icon: mdi:counter
            - type: custom:bar-card
              entity: sensor.pourcentage_croquette_restant
              name: Niveau du réservoir
              positions:
                icon: "off"
                name: inside
              severity:
                - color: "#f44336"
                  from: 0
                  to: 15
                - color: "#ff9800"
                  from: 15
                  to: 30
                - color: "#4caf50"
                  from: 30
                  to: 100
      - type: conditional
        conditions:
          - entity: input_number.pet_feeder_refill_date
            state_not: "0"
        card:
          type: vertical-stack
          cards:
            - type: entities
              title: 📊 Comparaison Estimations
              entities:
                - entity: sensor.jours_restants_nourriture
                  name: 📊 Estimation classique
                  icon: mdi:chart-bell-curve
                  secondary_info: |
                    Basée sur consommation théorique
                - entity: sensor.jours_restants_nourriture_methode_cumulative
                  name: 🎯 Calcul précis
                  icon: mdi:target
                  secondary_info: >
                    {{
                    state_attr('sensor.jours_restants_nourriture_methode_cumulative',
                    'precision') }}
                - type: custom:template-entity-row
                  entity: sensor.consommation_moyenne_reelle
                  name: Consommation réelle
                  icon: mdi:speedometer
                  state: "{{ states('sensor.consommation_moyenne_reelle') }} g/jour"
                  secondary: >
                    {{ state_attr('sensor.consommation_moyenne_reelle',
                    'methode') }}
            - type: gauge
              entity: sensor.consommation_moyenne_reelle
              name: Consommation Réelle
              min: 0
              max: 120
              severity:
                green: 50
                yellow: 80
                red: 100
              needle: true
              unit: g/jour
  - type: grid
    cards:
      - type: entities
        title: 🎛️ Contrôles
        entities:
          - type: call-service
            name: 🔄 Forcer recalcul portions
            service: homeassistant.update_entity
            service_data:
              entity_id: sensor.portions_calculees_matin
            icon: mdi:calculator
          - type: call-service
            name: 🍽️ Distribution manuelle test
            service: mqtt.publish
            service_data:
              topic: zigbee2mqtt02/Pet feeder/set
              payload: "{\"feed\": \"\"}"
            icon: mdi:play
          - type: call-service
            name: 📊 Reset compteur jour
            service: input_number.set_value
            service_data:
              entity_id: input_number.pet_feeder_daily_consumption_counter
              value: 0
            icon: mdi:restore
            confirmation:
              text: Êtes-vous sûr de vouloir remettre le compteur à zéro ?
      - type: entities
        title: 🔧 Gestion Manuelle
        entities:
          - entity: input_boolean.pet_feeder_manual_refill_trigger
            name: Déclencher nouveau cycle
            icon: mdi:reload
            secondary_info: Remet à zéro tous les compteurs
          - type: call-service
            name: 📝 Initialiser refill manuel
            service: input_boolean.turn_on
            service_data:
              entity_id: input_boolean.pet_feeder_manual_refill_trigger
            icon: mdi:package-variant-closed
            confirmation:
              text: Cela va remettre à zéro le suivi de consommation. Continuer ?
          - type: call-service
            name: 📊 Mise à jour stock estimé
            service: input_number.set_value
            service_data:
              entity_id: input_number.pet_feeder_stock_estime
              value: "{{ states('input_number.pet_feeder_max_capacity') }}"
            icon: mdi:warehouse
            confirmation:
              text: Marquer le réservoir comme plein ?
max_columns: 4
