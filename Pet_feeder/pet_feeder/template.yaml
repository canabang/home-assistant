#### pet-feeder ###
- sensor:
    - name: "Dernier repas distribué (g)"
      unique_id: pet_feeder_real_weight_today
      unit_of_measurement: "g"
      state: >
        {% if states('sensor.pet_feeder_feeding_size') not in ['unknown', 'unavailable'] %}
          {% set portion = states('sensor.pet_feeder_feeding_size') | int(0) %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {{ (portion * poids) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        portions: "{{ states('sensor.pet_feeder_feeding_size') }}"
        poids_unitaire: "{{ states('number.pet_feeder_portion_weight') }}g"
        derniere_distribution: "{{ states('sensor.pet_feeder_last_seen') }}"

    - name: "Poids total distribue"
      unique_id: pet_feeder_real_weight_total
      unit_of_measurement: "g"
      state: >
        {% if states('input_number.pet_feeder_total_distributed') not in ['unknown', 'unavailable'] %}
          {{ states('input_number.pet_feeder_total_distributed') | float(0) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        mise_a_jour: "{{ now().strftime('%Y-%m-%d %H:%M') }}"
        type: "Compteur cumulatif (sans remise à zéro)"

    - name: "Poids journalier programmé (g)"
      unique_id: pet_feeder_daily_scheduled_weight
      unit_of_measurement: "g"
      state: >
        {% if states('sensor.pet_feeder_weight_per_day') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.pet_feeder_weight_per_day') | float(0) | round(1) }}
        {% else %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {% set portions = states('sensor.pet_feeder_portions_per_day') | int(0) %}
          {{ (portions * poids) | round(1) }}
        {% endif %}
      attributes:
        portions_par_jour: "{{ states('sensor.pet_feeder_portions_per_day') }}"
        poids_par_portion: "{{ states('number.pet_feeder_portion_weight') }}g"
        source: "MQTT du distributeur"

    - name: "Pourcentage croquettes restantes"
      unique_id: pourcentage_croquette_restant
      unit_of_measurement: "%"
      state: >
        {% if states('input_number.pet_feeder_max_capacity') not in ['unknown', 'unavailable'] and 
              states('input_number.pet_feeder_stock_estime') not in ['unknown', 'unavailable'] %}
          {% set poids_total = states('input_number.pet_feeder_max_capacity') | float(1) %}
          {% set poids_restant = states('input_number.pet_feeder_stock_estime') | float(0) %}
          {% if poids_total > 0 %}
            {{ ((poids_restant / poids_total) * 100) | round(0) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          unavailable
        {% endif %}
      attributes:
        stock_estime: "{{ states('input_number.pet_feeder_stock_estime') }}g"
        capacite_max: "{{ states('input_number.pet_feeder_max_capacity') }}g"

    # Capteurs pour calculer automatiquement les portions
    - name: "Portions calculées matin"
      unique_id: pet_feeder_morning_portions
      state: >
        {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
        {% set target_total = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
        {% if poids_portion > 0 %}
          {% set total_portions = (target_total / poids_portion) | round(0) %}
          {% set matin = (total_portions * 0.28) | round(0) %}
          {{ matin | int }}
        {% else %}
          8
        {% endif %}
      attributes:
        poids_theorique: >
          {% set portions = states('sensor.portions_calculees_matin') | int(8) %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {{ (portions * poids) | round(0) }}g
        pourcentage: "28%"

    - name: "Portions calculées midi"
      unique_id: pet_feeder_noon_portions
      state: >
        {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
        {% set target_total = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
        {% if poids_portion > 0 %}
          {% set total_portions = (target_total / poids_portion) | round(0) %}
          {% set midi = (total_portions * 0.32) | round(0) %}
          {{ midi | int }}
        {% else %}
          9
        {% endif %}
      attributes:
        poids_theorique: >
          {% set portions = states('sensor.portions_calculees_midi') | int(9) %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {{ (portions * poids) | round(0) }}g
        pourcentage: "32%"

    - name: "Portions calculées soir"
      unique_id: pet_feeder_evening_portions
      state: >
        {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
        {% set target_total = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
        {% if poids_portion > 0 %}
          {% set total_portions = (target_total / poids_portion) | round(0) %}
          {% set soir = (total_portions * 0.40) | round(0) %}
          {{ soir | int }}
        {% else %}
          12
        {% endif %}
      attributes:
        poids_theorique: >
          {% set portions = states('sensor.portions_calculees_soir') | int(12) %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {{ (portions * poids) | round(0) }}g
        pourcentage: "40%"

    - name: "Total portions calculées"
      unique_id: pet_feeder_total_calculated_portions
      unit_of_measurement: "portions"
      state: >
        {% set matin = states('sensor.portions_calculees_matin') | int(0) %}
        {% set midi = states('sensor.portions_calculees_midi') | int(0) %}
        {% set soir = states('sensor.portions_calculees_soir') | int(0) %}
        {{ matin + midi + soir }}
      attributes:
        poids_total_theorique: >
          {% set total_portions = states('sensor.total_portions_calculees') | int(0) %}
          {% set poids = states('number.pet_feeder_portion_weight') | float(3) %}
          {{ (total_portions * poids) | round(0) }} g
        matin: >
          {% set portions_matin = states('sensor.portions_calculees_matin') | int(8) %}
          {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
          {% set poids_matin = (portions_matin * poids_portion) | round(0) %}
          {{ portions_matin }}p ({{ poids_matin }}g)
        midi: >
          {% set portions_midi = states('sensor.portions_calculees_midi') | int(9) %}
          {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
          {% set poids_midi = (portions_midi * poids_portion) | round(0) %}
          {{ portions_midi }}p ({{ poids_midi }}g)
        soir: >
          {% set portions_soir = states('sensor.portions_calculees_soir') | int(12) %}
          {% set poids_portion = states('number.pet_feeder_portion_weight') | float(3) %}
          {% set poids_soir = (portions_soir * poids_portion) | round(0) %}
          {{ portions_soir }}p ({{ poids_soir }}g)

    - name: "Consommation quotidienne moyenne"
      unique_id: pet_feeder_daily_average_consumption
      unit_of_measurement: "g"
      state: >
        {% set today_consumption = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
        {{ today_consumption | round(1) }}
      attributes:
        consommation_aujourd_hui: "{{ states('input_number.pet_feeder_daily_consumption_counter') }}g"
        objectif_quotidien: "{{ states('input_number.pet_feeder_target_daily_weight') }}g"
        ecart_objectif: >
          {% set today = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
          {% set target = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
          {{ (today - target) | round(1) }}g
        pourcentage_objectif: >
          {% set today = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
          {% set target = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
          {% if target > 0 %}
            {{ ((today / target) * 100) | round(1) }}%
          {% else %}
            0%
          {% endif %}

    - name: "Jours restants nourriture"
      unique_id: pet_feeder_days_remaining
      unit_of_measurement: "jours"
      state: >
        {% if states('input_number.pet_feeder_stock_estime') not in ['unknown', 'unavailable'] and
              states('sensor.consommation_quotidienne_moyenne') not in ['unknown', 'unavailable'] %}
          {% set stock = states('input_number.pet_feeder_stock_estime') | float(0) %}
          {% set consommation = states('sensor.consommation_quotidienne_moyenne') | float(0) %}
          {% if consommation > 0 %}
            {{ (stock / consommation) | round(1) }}
          {% else %}
            {% set target = states('input_number.pet_feeder_target_daily_weight') | float(85) %}
            {{ (stock / target) | round(1) }}
          {% endif %}
        {% else %}
          unavailable
        {% endif %}
      attributes:
        stock_actuel: "{{ states('input_number.pet_feeder_stock_estime') }}g"
        consommation_moyenne: "{{ states('sensor.consommation_quotidienne_moyenne') }}g/jour"
        methode: >
          {% if states('sensor.consommation_quotidienne_moyenne') | float(0) > 0 %}
            "Consommation réelle mesurée"
          {% else %}
            "Objectif théorique ({{ states('input_number.pet_feeder_target_daily_weight') }}g/jour)"
          {% endif %}

    - name: "Consommation moyenne réelle"
      unique_id: pet_feeder_real_daily_average
      unit_of_measurement: "g/jour"
      state: >
        {% set cumul = states('input_number.pet_feeder_cumulative_distributed_since_refill') | float(0) %}
        {% set timestamp_refill = states('input_number.pet_feeder_refill_date') | float(0) %}
        
        {% if timestamp_refill > 0 and cumul > 0 %}
          {% set jours_ecoules = ((now().timestamp() - timestamp_refill) / 86400) | round(1) %}
          {% if jours_ecoules >= 1 %}
            {{ (cumul / jours_ecoules) | round(1) }}
          {% else %}
            {# Si moins d'un jour écoulé, extrapoler sur 24h #}
            {% set heures_ecoulees = ((now().timestamp() - timestamp_refill) / 3600) | round(1) %}
            {% if heures_ecoulees >= 2 %}
              {{ (cumul * 24 / heures_ecoulees) | round(1) }}
            {% else %}
              {{ states('input_number.pet_feeder_target_daily_weight') | float(85) }}
            {% endif %}
          {% endif %}
        {% else %}
          {{ states('input_number.pet_feeder_target_daily_weight') | float(85) }}
        {% endif %}
      attributes:
        cumul_depuis_refill: "{{ states('input_number.pet_feeder_cumulative_distributed_since_refill') }}g"
        jours_ecoules: >
          {% set timestamp_refill = states('input_number.pet_feeder_refill_date') | float(0) %}
          {% if timestamp_refill > 0 %}
            {{ ((now().timestamp() - timestamp_refill) / 86400) | round(1) }}
          {% else %}
            0
          {% endif %}
        date_refill: >
          {% set timestamp_refill = states('input_number.pet_feeder_refill_date') | float(0) %}
          {% if timestamp_refill > 0 %}
            {{ timestamp_refill | timestamp_custom('%d/%m/%Y %H:%M') }}
          {% else %}
            "Non défini"
          {% endif %}
        methode: >
          {% set timestamp_refill = states('input_number.pet_feeder_refill_date') | float(0) %}
          {% set cumul = states('input_number.pet_feeder_cumulative_distributed_since_refill') | float(0) %}
          {% if timestamp_refill > 0 and cumul > 0 %}
            {% set jours_ecoules = ((now().timestamp() - timestamp_refill) / 86400) | round(1) %}
            {% if jours_ecoules >= 1 %}
              "Moyenne réelle sur {{ jours_ecoules }} jours"
            {% else %}
              "Extrapolation (moins de 24h de données)"
            {% endif %}
          {% else %}
            "Objectif théorique (pas encore de données)"
          {% endif %}

    - name: "Jours restants nourriture (méthode cumulative)"
      unique_id: pet_feeder_days_remaining_cumulative
      unit_of_measurement: "jours"
      state: >
        {% set stock = states('input_number.pet_feeder_stock_estime') | float(0) %}
        {% set moyenne_reelle = states('sensor.consommation_moyenne_reelle') | float(0) %}
        
        {% if stock > 0 and moyenne_reelle > 0 %}
          {{ (stock / moyenne_reelle) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        stock_actuel: "{{ states('input_number.pet_feeder_stock_estime') }}g"
        consommation_moyenne: "{{ states('sensor.consommation_moyenne_reelle') }}g/jour"
        precision: >
          {% set cumul = states('input_number.pet_feeder_cumulative_distributed_since_refill') | float(0) %}
          {% set timestamp_refill = states('input_number.pet_feeder_refill_date') | float(0) %}
          {% if timestamp_refill > 0 and cumul > 0 %}
            {% set jours_ecoules = ((now().timestamp() - timestamp_refill) / 86400) | round(1) %}
            {% if jours_ecoules >= 7 %}
              "Très précis ({{ jours_ecoules }} jours de données)"
            {% elif jours_ecoules >= 3 %}
              "Précis ({{ jours_ecoules }} jours de données)"
            {% elif jours_ecoules >= 1 %}
              "Assez précis ({{ jours_ecoules }} jours de données)"
            {% else %}
              "Estimation (extrapolation sur moins de 24h)"
            {% endif %}
          {% else %}
            "Théorique (pas encore de données réelles)"
          {% endif %}

# Nouveau sensor de validation croisée balance ↔ estimation
    - name: "Validation Stock Multi-Sources"
      unique_id: pet_feeder_stock_validation
      state: >
        {% set balance_pourcentage = states('sensor.esp_pet_scales_croquettes') | float(0) %}
        {% set estimation_pourcentage = states('sensor.pourcentage_croquette_restant') | float(0) %}
        {% set ecart = (balance_pourcentage - estimation_pourcentage) | abs %}
        
        {% if balance_pourcentage < 5 or estimation_pourcentage < 5 %}
          "CAPTEUR_DEFAILLANT"
        {% elif ecart > 25 %}
          "DIVERGENCE_MAJEURE"
        {% elif ecart > 15 %}
          "DIVERGENCE_MINEURE"
        {% elif ecart > 8 %}
          "ATTENTION"
        {% else %}
          "COHERENT"
        {% endif %}
      attributes:
        balance_pourcentage: "{{ states('sensor.esp_pet_scales_croquettes') }}%"
        estimation_pourcentage: "{{ states('sensor.pourcentage_croquette_restant') }}%"
        ecart_absolu: >
          {% set balance = states('sensor.esp_pet_scales_croquettes') | float(0) %}
          {% set estimation = states('sensor.pourcentage_croquette_restant') | float(0) %}
          {{ (balance - estimation) | abs | round(1) }}%
        ecart_relatif: >
          {% set balance = states('sensor.esp_pet_scales_croquettes') | float(0) %}
          {% set estimation = states('sensor.pourcentage_croquette_restant') | float(0) %}
          {% if estimation > 0 %}
            {{ (((balance - estimation) | abs / estimation) * 100) | round(1) }}%
          {% else %}
            "N/A"
          {% endif %}
        balance_grammes_calcule: >
          {% set pourcentage = states('sensor.esp_pet_scales_croquettes') | float(0) %}
          {% set capacite = states('input_number.pet_feeder_max_capacity') | float(1500) %}
          {{ ((pourcentage / 100) * capacite) | round(0) }}g
        estimation_grammes: "{{ states('input_number.pet_feeder_stock_estime') }}g"
        fiabilite: >
          {% set balance_etat = states('sensor.esp_pet_scales_croquettes_etat_capteur') %}
          {% set balance_code = states('sensor.esp_pet_scales_croquettes_etat_capteur_code') | float(0) %}
          {% if balance_code == 2.0 %}
            "Balance OK"
          {% elif balance_code == 1.0 %}
            "Balance hors calibration"
          {% else %}
            "Balance défaillante"
          {% endif %}

    # Sensor pour conversion balance en grammes (utile pour sync)
    - name: "Balance Croquettes en Grammes"
      unique_id: balance_croquettes_grammes
      unit_of_measurement: "g"
      state: >
        {% set pourcentage = states('sensor.esp_pet_scales_croquettes') | float(0) %}
        {% set capacite = states('input_number.pet_feeder_max_capacity') | float(1500) %}
        {{ ((pourcentage / 100) * capacite) | round(0) }}
      attributes:
        pourcentage_source: "{{ states('sensor.esp_pet_scales_croquettes') }}%"
        capacite_utilisee: "{{ states('input_number.pet_feeder_max_capacity') }}g"
        fiabilite_capteur: "{{ states('sensor.esp_pet_scales_croquettes_etat_capteur') }}"

    # Conversion balance eau en litres
    - name: "Balance Eau en Litres"
      unique_id: balance_eau_litres
      unit_of_measurement: "L"
      state: >
        {% set pourcentage = states('sensor.esp_pet_scales_eau') | float(0) %}
        {% set capacite_ml = 1500 %}  # Capacité max en ml (ajuster selon votre fontaine)
        {{ ((pourcentage / 100) * capacite_ml / 1000) | round(2) }}
      attributes:
        pourcentage_source: "{{ states('sensor.esp_pet_scales_eau') }}%"
        capacite_ml: "1500ml"  # Ajustez selon votre fontaine
        fiabilite_capteur: "{{ states('sensor.esp_pet_scales_eau_etat_capteur') | default('N/A') }}"

    # Consommation eau quotidienne
    - name: "Consommation Eau Quotidienne"
      unique_id: pet_water_daily_consumption
      unit_of_measurement: "ml"
      state: >
        {% set niveau_matin = states('input_number.pet_water_level_morning') | float(0) %}
        {% set niveau_actuel = states('sensor.esp_pet_scales_eau') | float(0) %}
        {% set capacite_ml = 1500 %}
        
        {% if niveau_matin > 0 %}
          {{ ((niveau_matin - niveau_actuel) * capacite_ml / 100) | round(0) }}
        {% else %}
          0
        {% endif %}
      attributes:
        niveau_matin: "{{ states('input_number.pet_water_level_morning') }}%"
        niveau_actuel: "{{ states('sensor.esp_pet_scales_eau') }}%"
        capacite_utilisee: "1500ml"

    # Ratio hydratation (ml eau / g croquettes)
    - name: "Ratio Hydratation Quotidien"
      unique_id: pet_hydration_ratio
      unit_of_measurement: "ml/g"
      state: >
        {% set eau_ml = states('sensor.consommation_eau_quotidienne') | float(0) %}
        {% set croquettes_g = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
        
        {% if croquettes_g > 5 %}  # Éviter division par 0
          {{ (eau_ml / croquettes_g) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        eau_consommee: "{{ states('sensor.consommation_eau_quotidienne') }}ml"
        croquettes_consommees: "{{ states('input_number.pet_feeder_daily_consumption_counter') }}g"
        evaluation: >
          {% set ratio = states('sensor.ratio_hydratation_quotidien') | float(0) %}
          {% if ratio == 0 %}
            "Pas de données"
          {% elif ratio < 1.0 %}
            "⚠️ Hydratation insuffisante"
          {% elif ratio < 2.0 %}
            "🟡 Hydratation faible"
          {% elif ratio < 3.5 %}
            "✅ Hydratation correcte"
          {% elif ratio < 5.0 %}
            "💧 Hydratation excellente"
          {% else %}
            "🌊 Très forte hydratation"
          {% endif %}
        conseil_veterinaire: >
          {% set ratio = states('sensor.ratio_hydratation_quotidien') | float(0) %}
          {% if ratio < 1.5 %}
            "Consultez un vétérinaire si persistant"
          {% elif ratio > 6.0 %}
            "Surveillance recommandée (possible problème de santé)"
          {% else %}
            "Hydratation dans la norme"
          {% endif %}

    # Validation globale système (Eau + Croquettes)
    - name: "Validation Système Complet"
      unique_id: pet_system_complete_validation
      state: >
        {% set validation_croquettes = states('sensor.validation_stock_multi_sources') %}
        {% set eau_niveau = states('sensor.esp_pet_scales_eau') | float(0) %}
        {% set eau_etat = states('sensor.esp_pet_scales_eau_etat_capteur_code') | float(0) %}
        {% set croquettes_etat = states('sensor.esp_pet_scales_croquettes_etat_capteur_code') | float(0) %}
        
        {% if eau_etat != 2.0 or croquettes_etat != 2.0 %}
          "CAPTEURS_DEFAILLANTS"
        {% elif validation_croquettes == 'DIVERGENCE_MAJEURE' %}
          "DIVERGENCE_CROQUETTES"
        {% elif eau_niveau < 10 %}
          "EAU_CRITIQUE"
        {% elif validation_croquettes in ['DIVERGENCE_MINEURE', 'ATTENTION'] %}
          "ATTENTION_CROQUETTES"
        {% elif eau_niveau < 20 %}
          "EAU_FAIBLE"
        {% else %}
          "SYSTEME_OPTIMAL"
        {% endif %}
      attributes:
        status_eau: >
          {% set niveau = states('sensor.esp_pet_scales_eau') | float(0) %}
          {% set etat = states('sensor.esp_pet_scales_eau_etat_capteur_code') | float(0) %}
          {% if etat != 2.0 %}
            "Capteur défaillant"
          {% elif niveau < 10 %}
            "🔴 Critique"
          {% elif niveau < 20 %}
            "🟠 Faible"
          {% elif niveau < 40 %}
            "🟡 Moyen"
          {% else %}
            "✅ OK"
          {% endif %}
        status_croquettes: >
          {% set validation = states('sensor.validation_stock_multi_sources') %}
          {% if validation == 'DIVERGENCE_MAJEURE' %}
            "🔴 Divergence majeure"
          {% elif validation == 'DIVERGENCE_MINEURE' %}
            "🟠 Divergence mineure"
          {% elif validation == 'ATTENTION' %}
            "🟡 Attention"
          {% else %}
            "✅ OK"
          {% endif %}
        score_global: >
          {% set score_croquettes = states('sensor.score_fiabilite_pet_feeder') | float(0) %}
          {% set eau_niveau = states('sensor.esp_pet_scales_eau') | float(0) %}
          {% set eau_etat = states('sensor.esp_pet_scales_eau_etat_capteur_code') | float(0) %}
          
          {% set score_eau = 10.0 %}
          {% if eau_etat != 2.0 %}
            {% set score_eau = 2.0 %}
          {% elif eau_niveau < 15 %}
            {% set score_eau = 4.0 %}
          {% elif eau_niveau < 30 %}
            {% set score_eau = 7.0 %}
          {% endif %}
          
          {{ ((score_croquettes + score_eau) / 2) | round(1) }}/10

# === MOYENNES HISTORIQUES ===
    - name: "Consommation Moyenne 7 Jours"
      unique_id: pet_feeder_avg_7days
      unit_of_measurement: "g"
      state: |
        {% set ns = namespace(total=0, count=0) %}
        {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=7) %}
          {% if state.state not in ['unknown', 'unavailable'] and state.state | float > 5 %}
            {% set ns.total = ns.total + (state.state | float) %}
            {% set ns.count = ns.count + 1 %}
          {% endif %}
        {% endfor %}
        {% if ns.count > 0 %}
          {{ (ns.total / ns.count) | round(1) }}
        {% else %}
          {{ states('input_number.pet_feeder_target_daily_weight') | float(85) }}
        {% endif %}
      attributes:
        jours_données: |
          {% set count = 0 %}
          {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=7) %}
            {% if state.state not in ['unknown', 'unavailable'] and state.state | float > 5 %}
              {% set count = count + 1 %}
            {% endif %}
          {% endfor %}
          {{ count }}

    - name: "Consommation Moyenne 30 Jours"
      unique_id: pet_feeder_avg_30days
      unit_of_measurement: "g"
      state: |
        {% set ns = namespace(total=0, count=0) %}
        {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=30) %}
          {% if state.state not in ['unknown', 'unavailable'] and state.state | float > 5 %}
            {% set ns.total = ns.total + (state.state | float) %}
            {% set ns.count = ns.count + 1 %}
          {% endif %}
        {% endfor %}
        {% if ns.count > 0 %}
          {{ (ns.total / ns.count) | round(1) }}
        {% else %}
          {{ states('sensor.consommation_moyenne_7_jours') | float(85) }}
        {% endif %}

    # === DÉTECTION TENDANCES ===
    - name: "Tendance Consommation"
      unique_id: pet_feeder_consumption_trend
      state: |
        {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
        {% set avg_30d = states('sensor.consommation_moyenne_30_jours') | float(0) %}
        {% set current = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
        
        {% if avg_7d > avg_30d * 1.1 %}
          "HAUSSE"
        {% elif avg_7d < avg_30d * 0.9 %}
          "BAISSE"  
        {% else %}
          "STABLE"
        {% endif %}
      attributes:
        variation_7j_vs_30j: |
          {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
          {% set avg_30d = states('sensor.consommation_moyenne_30_jours') | float(0) %}
          {% if avg_30d > 0 %}
            {{ (((avg_7d - avg_30d) / avg_30d) * 100) | round(1) }}%
          {% else %}
            "N/A"
          {% endif %}
        ecart_aujourd_hui_vs_moyenne: |
          {% set current = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
          {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
          {% if avg_7d > 0 %}
            {{ (current - avg_7d) | round(1) }}g
          {% else %}
            "N/A"
          {% endif %}

    # === ANOMALIES COMPORTEMENTALES ===
    - name: "Détection Anomalie Alimentaire"
      unique_id: pet_feeder_anomaly_detection
      state: |
        {% set current = states('input_number.pet_feeder_daily_consumption_counter') | float(0) %}
        {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
        {% set avg_30d = states('sensor.consommation_moyenne_30_jours') | float(0) %}
        
        {% if avg_7d > 0 %}
          {% if current > avg_7d * 1.5 %}
            "SURCONSOMMATION"
          {% elif current < avg_7d * 0.4 %}
            "SOUS_CONSOMMATION"
          {% elif current > avg_7d * 1.2 %}
            "CONSOMMATION_ELEVEE"
          {% elif current < avg_7d * 0.7 %}
            "CONSOMMATION_FAIBLE"
          {% else %}
            "NORMALE"
          {% endif %}
        {% else %}
          "DONNEES_INSUFFISANTES"
        {% endif %}
      attributes:
        seuil_alerte_haut: |
          {{ (states('sensor.consommation_moyenne_7_jours') | float(0) * 1.5) | round(1) }}g
        seuil_alerte_bas: |
          {{ (states('sensor.consommation_moyenne_7_jours') | float(0) * 0.4) | round(1) }}g
        niveau_confiance: |
          {% set jours = state_attr('sensor.consommation_moyenne_7_jours', 'jours_données') | int(0) %}
          {% if jours >= 7 %}
            "HAUTE"
          {% elif jours >= 3 %}
            "MOYENNE"
          {% else %}
            "FAIBLE"
          {% endif %}

    # === HISTORIQUE HYDRATATION ===
    - name: "Hydratation Moyenne 7 Jours"
      unique_id: pet_water_avg_7days
      unit_of_measurement: "ml/g"
      state: |
        {% set ns = namespace(total=0, count=0) %}
        {% for state in states.sensor.ratio_hydratation_quotidien.history(days=7) %}
          {% if state.state not in ['unknown', 'unavailable'] and state.state | float > 0.5 %}
            {% set ns.total = ns.total + (state.state | float) %}
            {% set ns.count = ns.count + 1 %}
          {% endif %}
        {% endfor %}
        {% if ns.count > 0 %}
          {{ (ns.total / ns.count) | round(1) }}
        {% else %}
          0
        {% endif %}

    - name: "Évolution Hydratation"
      unique_id: pet_water_evolution
      state: |
        {% set current = states('sensor.ratio_hydratation_quotidien') | float(0) %}
        {% set avg_7d = states('sensor.hydratation_moyenne_7_jours') | float(0) %}
        
        {% if avg_7d > 0 %}
          {% if current > avg_7d * 1.3 %}
            "FORTE_HAUSSE"
          {% elif current > avg_7d * 1.1 %}
            "HAUSSE_LEGERE"
          {% elif current < avg_7d * 0.7 %}
            "FORTE_BAISSE"
          {% elif current < avg_7d * 0.9 %}
            "BAISSE_LEGERE"
          {% else %}
            "STABLE"
          {% endif %}
        {% else %}
          "DONNEES_INSUFFISANTES"
        {% endif %}

    # === PRÉDICTIONS BASÉES SUR L'HISTORIQUE ===
    - name: "Prédiction Autonomie Améliorée"
      unique_id: pet_feeder_enhanced_prediction
      unit_of_measurement: "jours"
      state: |
        {% set stock = states('input_number.pet_feeder_stock_estime') | float(0) %}
        {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
        {% set avg_30d = states('sensor.consommation_moyenne_30_jours') | float(0) %}
        {% set tendance = states('sensor.tendance_consommation') %}
        
        {% if avg_7d > 0 %}
          {% set consommation_predite = avg_7d %}
          {% if tendance == "HAUSSE" %}
            {% set consommation_predite = avg_7d * 1.05 %}
          {% elif tendance == "BAISSE" %}
            {% set consommation_predite = avg_7d * 0.95 %}
          {% endif %}
          {{ (stock / consommation_predite) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        consommation_predite: |
          {% set avg_7d = states('sensor.consommation_moyenne_7_jours') | float(0) %}
          {% set tendance = states('sensor.tendance_consommation') %}
          {% if avg_7d > 0 %}
            {% if tendance == "HAUSSE" %}
              {{ (avg_7d * 1.05) | round(1) }}g/jour
            {% elif tendance == "BAISSE" %}
              {{ (avg_7d * 0.95) | round(1) }}g/jour
            {% else %}
              {{ avg_7d }}g/jour
            {% endif %}
          {% else %}
            "N/A"
          {% endif %}
        methode: "Moyenne 7j avec correction tendancielle"
        fiabilite: |
          {% set jours = state_attr('sensor.consommation_moyenne_7_jours', 'jours_données') | int(0) %}
          {% if jours >= 7 %}
            "95%"
          {% elif jours >= 5 %}
            "85%"
          {% else %}
            "70%"
          {% endif %}

    # === STATISTIQUES MENSUELLES ===
    - name: "Stats Mensuelles Pet Feeder"
      unique_id: pet_feeder_monthly_stats
      state: |
        {% set now_month = now().month %}
        {% set consommation_mois = 0 %}
        {% set jours_mois = 0 %}
        
        {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=31) %}
          {% if state.last_updated.month == now_month and state.state | float > 0 %}
            {% set consommation_mois = consommation_mois + (state.state | float) %}
            {% set jours_mois = jours_mois + 1 %}
          {% endif %}
        {% endfor %}
        
        {% if jours_mois > 0 %}
          {{ (consommation_mois / jours_mois) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        consommation_totale_mois: |
          {% set now_month = now().month %}
          {% set total = 0 %}
          {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=31) %}
            {% if state.last_updated.month == now_month and state.state | float > 0 %}
              {% set total = total + (state.state | float) %}
            {% endif %}
          {% endfor %}
          {{ total | round(0) }}g
        jours_avec_donnees: |
          {% set now_month = now().month %}
          {% set jours = 0 %}
          {% for state in states.input_number.pet_feeder_daily_consumption_counter.history(days=31) %}
            {% if state.last_updated.month == now_month and state.state | float > 0 %}
              {% set jours = jours + 1 %}
            {% endif %}
          {% endfor %}
          {{ jours }}
        projection_mois: |
          {% set current_avg = states('sensor.stats_mensuelles_pet_feeder') | float(0) %}
          {% set jours_restants = (now().replace(month=now().month+1, day=1) - now()).days %}
          {{ (current_avg * jours_restants) | round(0) }}g
