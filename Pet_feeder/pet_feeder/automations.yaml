alias: Pet Feeder - Détection rechargement et reset
description: Détecte le rechargement (passage de <300g à >950g) et remet le compteur à zéro
triggers:
  - entity_id:
      - input_number.pet_feeder_stock_estime
    trigger: state
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state.state | float(0) < 300 and 
         trigger.to_state.state | float(0) > 950 }}
actions:
  - target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_boolean.pet_feeder_stock_was_low
    action: input_boolean.turn_off
    data: {}
  - target:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_refill_date
    data:
      value: "{{ now().timestamp() }}"
    action: input_number.set_value
  - action: system_log.write
    data:
      message: >
        Pet Feeder: RECHARGEMENT DÉTECTÉ! Reset compteurs.  Stock: {{
        trigger.from_state.state }}g → {{ trigger.to_state.state }}g.  Nouveau
        cycle de suivi démarré.
      level: info


alias: Pet Feeder - Initialisation manuelle remplissage
description: Permet d'initialiser manuellement un nouveau cycle de suivi
triggers:
  - entity_id: input_boolean.pet_feeder_manual_refill_trigger
    trigger: state
    to: "on"
actions:
  - target:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_refill_date
    data:
      value: "{{ now().timestamp() }}"
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_boolean.pet_feeder_manual_refill_trigger
    action: input_boolean.turn_off
    data: {}
  - action: system_log.write
    data:
      message: "Pet Feeder: Initialisation manuelle d'un nouveau cycle de suivi"
      level: info
mode: single


alias: Pet Feeder - Mise à jour compteurs unifiée
description: >-
  Met à jour tous les compteurs (quotidien, cumulatif, stock) lors d'une
  distribution
triggers:
  - entity_id:
      - sensor.pet_feeder_weight_per_day
    trigger: state
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state is not none and 
         trigger.to_state is not none and
         trigger.from_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state | float(0) > 0 and
         trigger.to_state.state | float(0) > trigger.from_state.state | float(0) and
         (trigger.to_state.state | float(0) - trigger.from_state.state | float(0)) > 0.5 }}
actions:
  - variables:
      poids_distribue: "{{ (trigger.to_state.state | float(0) - trigger.from_state.state | float(0)) | round(1) }}"
      stock_actuel: "{{ states('input_number.pet_feeder_stock_estime') | float(0) }}"
      nouveau_stock: "{{ [stock_actuel - poids_distribue, 0] | max | round(1) }}"
      cumul_actuel: >-
        {{ states('input_number.pet_feeder_cumulative_distributed_since_refill')
        | float(0) }}
      nouveau_cumul: "{{ (cumul_actuel + poids_distribue) | round(1) }}"
      compteur_quotidien_actuel: >-
        {{ states('input_number.pet_feeder_daily_consumption_counter') |
        float(0) }}
      nouveau_compteur_quotidien: "{{ (compteur_quotidien_actuel + poids_distribue) | round(1) }}"
      total_cumulatif_actuel: "{{ states('input_number.pet_feeder_total_distributed') | float(0) }}"
      nouveau_total_cumulatif: "{{ (total_cumulatif_actuel + poids_distribue) | round(1) }}"
  - data:
      entity_id: input_number.pet_feeder_stock_estime
      value: "{{ nouveau_stock }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
      value: "{{ nouveau_cumul }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_daily_consumption_counter
      value: "{{ nouveau_compteur_quotidien }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_total_distributed
      value: "{{ nouveau_total_cumulatif }}"
    action: input_number.set_value
  - action: system_log.write
    data:
      message: >
        Pet Feeder: {{ poids_distribue }}g distribués ({{ trigger.from_state.state }}g → {{ trigger.to_state.state }}g).  
        Stock: {{ stock_actuel }}g → {{ nouveau_stock }}g |  
        Cumul depuis refill: {{ cumul_actuel }}g → {{ nouveau_cumul }}g |  
        Quotidien: {{ compteur_quotidien_actuel }}g → {{ nouveau_compteur_quotidien }}g |  
        Total: {{ total_cumulatif_actuel }}g → {{ nouveau_total_cumulatif }}g
      level: info
mode: single

alias: Pet Feeder - Recalcul automatique des portions
description: Recalcule et applique les portions quand le poids unitaire change
triggers:
  - entity_id:
      - number.pet_feeder_portion_weight
      - input_number.pet_feeder_target_daily_weight
    trigger: state
    for:
      seconds: 3
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state is not none and 
         trigger.to_state is not none and
         trigger.to_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state | float(0) > 0 }}
actions:
  - delay:
      seconds: 2
  - variables:
      portions_matin: "{{ states('sensor.portions_calculees_matin') | int(8) }}"
      portions_midi: "{{ states('sensor.portions_calculees_midi') | int(9) }}"
      portions_soir: "{{ states('sensor.portions_calculees_soir') | int(12) }}"
      poids_portion: "{{ trigger.to_state.state | float(3) }}"
  - action: mqtt.publish
    data:
      topic: zigbee2mqtt02/Pet feeder/set
      payload: |
        {
          "schedule": [
            {"days": "everyday", "hour": 8, "minute": 0, "size": {{ portions_matin }}},
            {"days": "everyday", "hour": 14, "minute": 0, "size": {{ portions_midi }}},
            {"days": "everyday", "hour": 20, "minute": 0, "size": {{ portions_soir }}}
          ]
        }
  - action: system_log.write
    data:
      message: >
        Pet Feeder: Portions recalculées pour {{ poids_portion }}g/portion.
        Nouvelle répartition: Matin={{ portions_matin }}p, Midi={{ portions_midi
        }}p, Soir={{ portions_soir }}p. Total théorique: {{ (portions_matin +
        portions_midi + portions_soir) * poids_portion }}g/jour
      level: info
mode: single


alias: Pet Feeder - Reset quotidien compteur consommation
description: Remet à zéro le compteur de consommation quotidienne chaque jour à minuit
triggers:
  - at: "00:00:00"
    trigger: time
conditions: []
actions:
  - action: input_number.set_value
    target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
  - action: system_log.write
    data:
      message: "Pet Feeder: Reset automatique du compteur quotidien à minuit"
      level: info
mode: single


alias: Pet Feeder - Suivi stock bas
description: Marque quand le stock passe en dessous de 300g
triggers:
  - entity_id: input_number.pet_feeder_stock_estime
    below: 300
    trigger: numeric_state
actions:
  - target:
      entity_id: input_boolean.pet_feeder_stock_was_low
    action: input_boolean.turn_on
    data: {}



alias: Niveau Fontaine
description: ""
triggers:
  - trigger: numeric_state
    entity_id:
      - sensor.esp_pet_scales_eau
    below: 30
    enabled: false
  - trigger: state
    entity_id:
      - sensor.esp_pet_scales_eau
  - trigger: homeassistant
    event: start
conditions: []
actions:
  - repeat:
      sequence:
        - sequence:
            - action: google_generative_ai_conversation.generate_content
              data:
                prompt: >-
                  Génère un message vocal d’alerte pour prévenir que le niveau
                  d’eau de la fontaine du chat est trop bas.


                  Le ton doit être factuel avec une légère touche d’humour ou de
                  sarcasme façon droïde reprogrammé type K-2SO (Star Wars).

                  Le message doit inclure le niveau actuel d’eau, sous forme de
                  pourcentage, fourni dans la variable suivante :

                  {{ states('sensor.esp_pet_scales_eau') }}%

                  Sois bref et direct : la réponse doit être courte et adaptée
                  au TTS.

                  Pas de smileys, pas d’émoticônes, pas de menace ni de formule
                  agressive.

                  Tu peux glisser un clin d'œil geek ou pop culture si
                  pertinent.


                  Exemples de ton attendu :


                  « Niveau d’eau de la fontaine :
                  {{states('sensor.esp_pet_scales_eau')}} %. Il serait peut-être
                  temps d’agir. »


                  « La fontaine du chat affiche
                  {{states('sensor.esp_pet_scales_eau')}} %. On frôle la panne
                  hydraulique féline. »


                  « Niveau critique détecté :
                  {{states('sensor.esp_pet_scales_eau')}} %. Je conseille un
                  ravitaillement immédiat. »


                  « {{states('sensor.esp_pet_scales_eau')}} % d’eau restante.
                  Même un Jawa ne s’en contenterait pas. »


                  Génère uniquement la phrase finale, sans balises, sans
                  explications, sans métadonnées.
              response_variable: generated_message
            - action: script.1717220445110
              data:
                message: "{{ generated_message.text }}"
              enabled: true
            - action: script.awtrix_dynamique_customapp_dupliquer
              data:
                icone: fontaine
                rainbow: "false"
                scrollspeed: "50"
                color: "#8b0000"
                duree: "25"
                message: "{{ generated_message.text }}"
        - delay:
            hours: 2
            minutes: 0
            seconds: 0
            milliseconds: 0
      while:
        - condition: numeric_state
          entity_id: sensor.esp_pet_scales_eau
          below: 30
mode: single

alias: "Pet Feeder - Correction Manuelle via Balance"
  description: "Force la synchronisation avec la balance quand demandé manuellement"
  triggers:
    - platform: state
      entity_id: input_boolean.pet_feeder_force_sync_balance
      to: "on"
  actions:
    - variables:
        ancien_stock: "{{ states('input_number.pet_feeder_stock_estime') | float(0) }}"
        nouveau_stock: "{{ states('sensor.balance_croquettes_en_grammes') | float(0) }}"
        ecart_correction: "{{ (nouveau_stock - ancien_stock) | abs }}"
    - service: input_number.set_value
      target:
        entity_id: input_number.pet_feeder_stock_estime
      data:
        value: "{{ nouveau_stock }}"
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.pet_feeder_force_sync_balance
    - service: persistent_notification.dismiss
      data:
        notification_id: "pet_feeder_divergence"
    - service: script.1717220445110
      data:
        message: >
          Correction manuelle effectuée. Stock corrigé de {{ ancien_stock | round(0) }}g 
          vers {{ nouveau_stock | round(0) }}g selon la balance physique.
    - service: system_log.write
      data:
        message: >
          Pet Feeder: Correction manuelle forcée par utilisateur.
          Ancien: {{ ancien_stock }}g → Nouveau: {{ nouveau_stock }}g (écart: {{ ecart_correction }}g)
          Balance: {{ states('sensor.esp_pet_scales_croquettes') }}%
        level: info
  mode: single

  alias: Pet Feeder - Correction Divergence Majeure
description: Correction automatique en cas de divergence importante détectée
triggers:
  - entity_id: sensor.validation_stock_multi_sources
    to: DIVERGENCE_MAJEURE
    for:
      minutes: 2
    trigger: state
conditions:
  - condition: state
    entity_id: sensor.esp_pet_scales_croquettes_etat_capteur_code
    state: "2.0"
  - condition: numeric_state
    entity_id: sensor.esp_pet_scales_croquettes
    above: 5
actions:
  - variables:
      ancien_stock: "{{ states('input_number.pet_feeder_stock_estime') | float(0) }}"
      stock_balance: "{{ states('sensor.balance_croquettes_en_grammes') | float(0) }}"
      ecart_detecte: >-
        {{ state_attr('sensor.validation_stock_multi_sources', 'ecart_absolu')
        }}
  - data:
      notification_id: pet_feeder_divergence
      title: 🐾 Pet Feeder - Divergence Détectée
      message: >
        DIVERGENCE MAJEURE détectée !

        📊 Balance physique : {{ states('sensor.esp_pet_scales_croquettes') }}%
        ({{ stock_balance }}g) 🧮 Estimation HA : {{
        states('sensor.pourcentage_croquette_restant') }}% ({{ ancien_stock }}g)
        ⚠️ Écart : {{ ecart_detecte }}

        La balance indique {{ stock_balance }}g, faut-il corriger l'estimation ?

        Cliquez sur 'Corriger avec Balance' pour synchroniser automatiquement.
    action: persistent_notification.create
  - data:
      message: >
        Pet Feeder: DIVERGENCE MAJEURE détectée ! Balance: {{
        states('sensor.esp_pet_scales_croquettes') }}% ({{ stock_balance }}g)
        Estimation: {{ ancien_stock }}g Écart: {{ ecart_detecte }} État capteur:
        {{ states('sensor.esp_pet_scales_croquettes_etat_capteur') }}
        Notification créée pour validation manuelle.
      level: warning
    action: system_log.write
mode: single

alias: Pet Feeder - Niveau Croquettes Multi-Sources Enhanced
description: Alerte intelligente basée sur balance ET estimation avec validation croisée
triggers:
  - entity_id: sensor.esp_pet_scales_croquettes
    below: 30
    trigger: numeric_state
  - entity_id: sensor.pourcentage_croquette_restant
    below: 30
    trigger: numeric_state
  - entity_id: sensor.validation_stock_multi_sources
    to: DIVERGENCE_MAJEURE
    trigger: state
  - event: start
    trigger: homeassistant
conditions:
  - condition: or
    conditions:
      - condition: numeric_state
        entity_id: sensor.esp_pet_scales_croquettes
        below: 30
      - condition: numeric_state
        entity_id: sensor.pourcentage_croquette_restant
        below: 30
      - condition: state
        entity_id: sensor.validation_stock_multi_sources
        state: DIVERGENCE_MAJEURE
actions:
  - choose:
      - conditions:
          - condition: state
            entity_id: sensor.validation_stock_multi_sources
            state: DIVERGENCE_MAJEURE
        sequence:
          - data:
              prompt: >
                Génère un message d'alerte technique indiquant une DIVERGENCE
                MAJEURE  entre les mesures de stock de croquettes. Situation
                critique à analyser.

                📊 Balance physique : {{
                states('sensor.esp_pet_scales_croquettes') }}% 🧮 Estimation
                Home Assistant : {{
                states('sensor.pourcentage_croquette_restant') }}% ⚠️ Écart
                détecté : {{ state_attr('sensor.validation_stock_multi_sources',
                'ecart_absolu') }} 🔧 État capteur : {{
                states('sensor.esp_pet_scales_croquettes_etat_capteur') }}

                Utilise un ton façon K-2SO (Star Wars) : factuel, légèrement
                sarcastique,  mais indiquant la gravité de la situation. Sois
                bref pour le TTS. Suggère une vérification manuelle.
            response_variable: divergence_message
            action: google_generative_ai_conversation.generate_content
          - data:
              message: "{{ divergence_message.text }}"
            action: script.1717220445110
          - data:
              icone: catfood
              rainbow: "true"
              scrollspeed: "40"
              color: "#ff0000"
              duree: "30"
              message: "DIVERGENCE: {{ divergence_message.text[:50] }}..."
            action: script.awtrix_dynamique_customapp_dupliquer
    default:
      - repeat:
          sequence:
            - variables:
                balance_niveau: "{{ states('sensor.esp_pet_scales_croquettes') | float(0) }}"
                estimation_niveau: >-
                  {{ states('sensor.pourcentage_croquette_restant') | float(0)
                  }}
                jours_restants_classique: "{{ states('sensor.jours_restants_nourriture') }}"
                jours_restants_precis: >-
                  {{
                  states('sensor.jours_restants_nourriture_methode_cumulative')
                  }}
                validation_etat: "{{ states('sensor.validation_stock_multi_sources') }}"
            - data:
                prompt: >
                  Génère un message d'alerte pour stock bas de croquettes avec
                  données complètes.

                  📊 Balance physique : {{ balance_niveau }}% 🧮 Estimation HA :
                  {{ estimation_niveau }}% 📅 Autonomie classique : {{
                  jours_restants_classique }} jours 🎯 Autonomie précise : {{
                  jours_restants_precis }} jours   🔍 Validation : {{
                  validation_etat }}

                  Style K-2SO de Star Wars : factuel avec pointe
                  d'humour/sarcasme. Mentionne la source la plus fiable selon la
                  validation. Message bref pour TTS, max 2 phrases.

                  Si validation = "COHERENT" : utilise les deux valeurs Si
                  validation = "ATTENTION" : privilégie la balance Sinon :
                  indique l'incertitude
              response_variable: generated_message
              action: google_generative_ai_conversation.generate_content
            - data:
                message: "{{ generated_message.text }}"
              action: script.1717220445110
            - data:
                icone: catfood
                rainbow: "false"
                scrollspeed: "50"
                color: |
                  {% if balance_niveau < 15 or estimation_niveau < 15 %}
                    "#ff0000"
                  {% elif balance_niveau < 25 or estimation_niveau < 25 %}
                    "#ff8000"
                  {% else %}
                    "#ffff00"
                  {% endif %}
                duree: "25"
                message: "{{ generated_message.text }}"
              action: script.awtrix_dynamique_customapp_dupliquer
            - delay:
                hours: 2
          while:
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.esp_pet_scales_croquettes
                  below: 30
                - condition: numeric_state
                  entity_id: sensor.pourcentage_croquette_restant
                  below: 30
mode: single

alias: Pet Feeder - Sync Balance vers Estimation
description: Synchronise l'estimation avec la balance si les données sont cohérentes
triggers:
  - at: "06:00:00"
    trigger: time
  - entity_id: sensor.validation_stock_multi_sources
    to: COHERENT
    for:
      minutes: 5
    trigger: state
conditions:
  - condition: state
    entity_id: sensor.validation_stock_multi_sources
    state: COHERENT
  - condition: numeric_state
    entity_id: sensor.esp_pet_scales_croquettes
    above: 10
  - condition: state
    entity_id: sensor.esp_pet_scales_croquettes_etat_capteur_code
    state: "2.0"
actions:
  - variables:
      ancien_stock: "{{ states('input_number.pet_feeder_stock_estime') | float(0) }}"
      nouveau_stock: "{{ states('sensor.balance_croquettes_en_grammes') | float(0) }}"
      ecart_sync: "{{ (nouveau_stock - ancien_stock) | abs }}"
  - target:
      entity_id: input_number.pet_feeder_stock_estime
    data:
      value: "{{ nouveau_stock }}"
    action: input_number.set_value
  - data:
      message: >
        Pet Feeder: Sync automatique balance → estimation réussie. Balance: {{
        states('sensor.esp_pet_scales_croquettes') }}% ({{ nouveau_stock }}g)
        Ancien estimé: {{ ancien_stock }}g → Nouveau: {{ nouveau_stock }}g Écart
        corrigé: {{ ecart_sync }}g
      level: info
    action: system_log.write
  - if:
      - condition: template
        value_template: "{{ ecart_sync > 100 }}"
    then:
      - data:
          message: >
            Correction automatique du stock : écart de {{ ecart_sync | round(0)
            }}g  détecté et corrigé via la balance physique.
        action: script.1717220445110
mode: single

alias: "Pet Water - Sauvegarde Niveau Matinal"
description: "Enregistre le niveau d'eau du matin pour calculer la consommation"
triggers:
  - platform: time
    at: "06:00:00"
actions:
  - service: input_number.set_value
    target:
      entity_id: input_number.pet_water_level_morning
    data:
      value: "{{ states('sensor.esp_pet_scales_eau') | float(0) }}"
  - service: system_log.write
    data:
      message: >
        Pet Water: Niveau matinal enregistré: {{ states('sensor.esp_pet_scales_eau') }}%
      level: info
mode: single

# Mise à jour compteur consommation eau
alias: "Pet Water - Mise à Jour Consommation"
description: "Met à jour le compteur de consommation d'eau"
triggers:
  - platform: state
    entity_id: sensor.consommation_eau_quotidienne
  - platform: time
    at: "12:00:00"  # Mise à jour midi
  - platform: time
    at: "18:00:00"  # Mise à jour soir
actions:
  - service: input_number.set_value
    target:
      entity_id: input_number.pet_water_daily_counter
    data:
      value: "{{ states('sensor.consommation_eau_quotidienne') | float(0) }}"
mode: single

# Reset quotidien compteur eau
alias: "Pet Water - Reset Quotidien"
description: "Remet à zéro le compteur d'eau quotidien"
triggers:
  - platform: time
    at: "00:00:05"
actions:
  - service: input_number.set_value
    target:
      entity_id: input_number.pet_water_daily_counter
    data:
      value: 0
  - service: system_log.write
    data:
      message: "Pet Water: Reset quotidien compteur eau"
      level: info
mode: single

# Amélioration de votre automation fontaine existante
alias: "Pet Water - Niveau Fontaine Enhanced"
description: "Version enrichie de votre alerte niveau eau avec données complètes"
triggers:
  - platform: numeric_state
    entity_id: sensor.esp_pet_scales_eau
    below: 30
  - platform: state
    entity_id: sensor.validation_systeme_complet
    to: "EAU_CRITIQUE"
  - platform: homeassistant
    event: start
conditions:
  - condition: or
    conditions:
      - condition: numeric_state
        entity_id: sensor.esp_pet_scales_eau
        below: 30
      - condition: state
        entity_id: sensor.validation_systeme_complet
        state: "EAU_CRITIQUE"
actions:
  - repeat:
      sequence:
        - variables:
            niveau_eau: "{{ states('sensor.esp_pet_scales_eau') | float(0) }}"
            consommation_jour: "{{ states('sensor.consommation_eau_quotidienne') | float(0) }}"
            ratio_hydratation: "{{ states('sensor.ratio_hydratation_quotidien') | float(0) }}"
            evaluation_hydratation: "{{ state_attr('sensor.ratio_hydratation_quotidien', 'evaluation') }}"
        - service: google_generative_ai_conversation.generate_content
          data:
            prompt: >
              Génère un message d'alerte pour niveau d'eau bas de la fontaine avec données complètes.
              
              💧 Niveau actuel: {{ niveau_eau }}%
              📊 Consommation aujourd'hui: {{ consommation_jour }}ml
              ⚖️ Ratio hydratation: {{ ratio_hydratation }}ml/g
              📈 Évaluation: {{ evaluation_hydratation }}
              
              Style K-2SO (Star Wars): factuel avec légère touche d'humour/sarcasme.
              Inclure une référence geek si pertinent selon les données d'hydratation.
              Message bref pour TTS, max 2 phrases.
              Si ratio d'hydratation préoccupant, le mentionner subtilement.
          response_variable: water_message
        - service: script.1717220445110
          data:
            message: "{{ water_message.text }}"
        - service: script.awtrix_dynamique_customapp_dupliquer
          data:
            icone: fontaine
            rainbow: "false"
            scrollspeed: "50"
            color: >
              {% if niveau_eau < 15 %}
                "#ff0000"
              {% elif niveau_eau < 25 %}
                "#ff8000"
              {% else %}
                "#ffff00"
              {% endif %}
            duree: "25"
            message: "{{ water_message.text }}"
        - delay:
            hours: 2
      while:
        - condition: or
          conditions:
            - condition: numeric_state
              entity_id: sensor.esp_pet_scales_eau
              below: 30
            - condition: state
              entity_id: sensor.validation_systeme_complet
              state: "EAU_CRITIQUE"
mode: single

# Alerte hydratation anormale
alias: "Pet Water - Alerte Hydratation Anormale"
description: "Notification si ratio d'hydratation préoccupant"
triggers:
  - platform: numeric_state
    entity_id: sensor.ratio_hydratation_quotidien
    below: 1.0
    for:
      hours: 2
  - platform: numeric_state
    entity_id: sensor.ratio_hydratation_quotidien
    above: 6.0
    for:
      hours: 1
conditions:
  - condition: time
    after: "10:00:00"  # Éviter fausses alertes matinales
  - condition: numeric_state
    entity_id: input_number.pet_feeder_daily_consumption_counter
    above: 5  # Assurer données suffisantes
actions:
  - variables:
      ratio: "{{ states('sensor.ratio_hydratation_quotidien') | float(0) }}"
      evaluation: "{{ state_attr('sensor.ratio_hydratation_quotidien', 'evaluation') }}"
      conseil: "{{ state_attr('sensor.ratio_hydratation_quotidien', 'conseil_veterinaire') }}"
  - service: google_generative_ai_conversation.generate_content
    data:
      prompt: >
        Génère une alerte sur l'hydratation anormale détectée.
        
        ⚖️ Ratio hydratation: {{ ratio }}ml/g
        📊 Évaluation: {{ evaluation }}
        🏥 Conseil: {{ conseil }}
        
        {% if ratio < 1.0 %}
        Le chat boit très peu par rapport à ce qu'il mange. Possible déshydratation.
        {% else %}
        Le chat boit beaucoup par rapport à ce qu'il mange. Surveillance recommandée.
        {% endif %}
        
        Style K-2SO mais avec une nuance de préoccupation pour la santé.
        Suggère discretement une surveillance ou consultation vétérinaire si nécessaire.
    response_variable: hydration_alert
  - service: script.1717220445110
    data:
      message: "{{ hydration_alert.text }}"
  - service: persistent_notification.create
    data:
      notification_id: "pet_hydration_alert"
      title: "🩺 Pet Health - Hydratation Anormale"
      message: >
        **Ratio détecté:** {{ ratio }}ml/g
        **Évaluation:** {{ evaluation }}
        **Conseil:** {{ conseil }}
        
        {{ hydration_alert.text }}
mode: single
