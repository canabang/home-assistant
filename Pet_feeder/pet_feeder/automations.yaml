alias: Pet Feeder - Détection rechargement et reset
description: Détecte le rechargement (passage de <300g à >950g) et remet le compteur à zéro
triggers:
  - entity_id:
      - input_number.pet_feeder_stock_estime
    trigger: state
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state.state | float(0) < 300 and 
         trigger.to_state.state | float(0) > 950 }}
actions:
  - target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_boolean.pet_feeder_stock_was_low
    action: input_boolean.turn_off
    data: {}
  - target:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_refill_date
    data:
      value: "{{ now().timestamp() }}"
    action: input_number.set_value
  - action: system_log.write
    data:
      message: >
        Pet Feeder: RECHARGEMENT DÉTECTÉ! Reset compteurs.  Stock: {{
        trigger.from_state.state }}g → {{ trigger.to_state.state }}g.  Nouveau
        cycle de suivi démarré.
      level: info


alias: Pet Feeder - Initialisation manuelle remplissage
description: Permet d'initialiser manuellement un nouveau cycle de suivi
triggers:
  - entity_id: input_boolean.pet_feeder_manual_refill_trigger
    trigger: state
    to: "on"
actions:
  - target:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_refill_date
    data:
      value: "{{ now().timestamp() }}"
    action: input_number.set_value
  - target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
    action: input_number.set_value
  - target:
      entity_id: input_boolean.pet_feeder_manual_refill_trigger
    action: input_boolean.turn_off
    data: {}
  - action: system_log.write
    data:
      message: "Pet Feeder: Initialisation manuelle d'un nouveau cycle de suivi"
      level: info
mode: single


alias: Pet Feeder - Mise à jour compteurs unifiée
description: >-
  Met à jour tous les compteurs (quotidien, cumulatif, stock) lors d'une
  distribution
triggers:
  - entity_id:
      - sensor.pet_feeder_weight_per_day
    trigger: state
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state is not none and 
         trigger.to_state is not none and
         trigger.from_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state | float(0) > 0 and
         trigger.to_state.state | float(0) > trigger.from_state.state | float(0) and
         (trigger.to_state.state | float(0) - trigger.from_state.state | float(0)) > 0.5 }}
actions:
  - variables:
      poids_distribue: "{{ (trigger.to_state.state | float(0) - trigger.from_state.state | float(0)) | round(1) }}"
      stock_actuel: "{{ states('input_number.pet_feeder_stock_estime') | float(0) }}"
      nouveau_stock: "{{ [stock_actuel - poids_distribue, 0] | max | round(1) }}"
      cumul_actuel: >-
        {{ states('input_number.pet_feeder_cumulative_distributed_since_refill')
        | float(0) }}
      nouveau_cumul: "{{ (cumul_actuel + poids_distribue) | round(1) }}"
      compteur_quotidien_actuel: >-
        {{ states('input_number.pet_feeder_daily_consumption_counter') |
        float(0) }}
      nouveau_compteur_quotidien: "{{ (compteur_quotidien_actuel + poids_distribue) | round(1) }}"
      total_cumulatif_actuel: "{{ states('input_number.pet_feeder_total_distributed') | float(0) }}"
      nouveau_total_cumulatif: "{{ (total_cumulatif_actuel + poids_distribue) | round(1) }}"
  - data:
      entity_id: input_number.pet_feeder_stock_estime
      value: "{{ nouveau_stock }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_cumulative_distributed_since_refill
      value: "{{ nouveau_cumul }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_daily_consumption_counter
      value: "{{ nouveau_compteur_quotidien }}"
    action: input_number.set_value
  - data:
      entity_id: input_number.pet_feeder_total_distributed
      value: "{{ nouveau_total_cumulatif }}"
    action: input_number.set_value
  - action: system_log.write
    data:
      message: >
        Pet Feeder: {{ poids_distribue }}g distribués ({{ trigger.from_state.state }}g → {{ trigger.to_state.state }}g).  
        Stock: {{ stock_actuel }}g → {{ nouveau_stock }}g |  
        Cumul depuis refill: {{ cumul_actuel }}g → {{ nouveau_cumul }}g |  
        Quotidien: {{ compteur_quotidien_actuel }}g → {{ nouveau_compteur_quotidien }}g |  
        Total: {{ total_cumulatif_actuel }}g → {{ nouveau_total_cumulatif }}g
      level: info
mode: single

alias: Pet Feeder - Recalcul automatique des portions
description: Recalcule et applique les portions quand le poids unitaire change
triggers:
  - entity_id:
      - number.pet_feeder_portion_weight
      - input_number.pet_feeder_target_daily_weight
    trigger: state
    for:
      seconds: 3
    from: null
    to: null
conditions:
  - condition: template
    value_template: |
      {{ trigger.from_state is not none and 
         trigger.to_state is not none and
         trigger.to_state.state not in ['unknown', 'unavailable'] and
         trigger.to_state.state | float(0) > 0 }}
actions:
  - delay:
      seconds: 2
  - variables:
      portions_matin: "{{ states('sensor.portions_calculees_matin') | int(8) }}"
      portions_midi: "{{ states('sensor.portions_calculees_midi') | int(9) }}"
      portions_soir: "{{ states('sensor.portions_calculees_soir') | int(12) }}"
      poids_portion: "{{ trigger.to_state.state | float(3) }}"
  - action: mqtt.publish
    data:
      topic: zigbee2mqtt02/Pet feeder/set
      payload: |
        {
          "schedule": [
            {"days": "everyday", "hour": 8, "minute": 0, "size": {{ portions_matin }}},
            {"days": "everyday", "hour": 14, "minute": 0, "size": {{ portions_midi }}},
            {"days": "everyday", "hour": 20, "minute": 0, "size": {{ portions_soir }}}
          ]
        }
  - action: system_log.write
    data:
      message: >
        Pet Feeder: Portions recalculées pour {{ poids_portion }}g/portion.
        Nouvelle répartition: Matin={{ portions_matin }}p, Midi={{ portions_midi
        }}p, Soir={{ portions_soir }}p. Total théorique: {{ (portions_matin +
        portions_midi + portions_soir) * poids_portion }}g/jour
      level: info
mode: single


alias: Pet Feeder - Reset quotidien compteur consommation
description: Remet à zéro le compteur de consommation quotidienne chaque jour à minuit
triggers:
  - at: "00:00:00"
    trigger: time
conditions: []
actions:
  - action: input_number.set_value
    target:
      entity_id: input_number.pet_feeder_daily_consumption_counter
    data:
      value: 0
  - action: system_log.write
    data:
      message: "Pet Feeder: Reset automatique du compteur quotidien à minuit"
      level: info
mode: single


alias: Pet Feeder - Suivi stock bas
description: Marque quand le stock passe en dessous de 300g
triggers:
  - entity_id: input_number.pet_feeder_stock_estime
    below: 300
    trigger: numeric_state
actions:
  - target:
      entity_id: input_boolean.pet_feeder_stock_was_low
    action: input_boolean.turn_on
    data: {}
